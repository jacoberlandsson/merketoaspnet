// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using merketoaspnet.Contexts;

#nullable disable

namespace merketoaspnet.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230525114906_SeedFunctionMoreProducts")]
    partial class SeedFunctionMoreProducts
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "9b90fae1-57f4-481e-b2e8-25b1f547e67a",
                            ConcurrencyStamp = "454ed497-d43a-421f-992d-2b27d2828f47",
                            Name = "Administrator",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "c71aa991-0f56-4b59-b581-fdd57d958bf2",
                            ConcurrencyStamp = "50cbea48-e94b-4cc1-93b3-8ed26227312e",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "9ab0d2f8-a950-42fe-af29-456e8bebba1b",
                            RoleId = "9b90fae1-57f4-481e-b2e8-25b1f547e67a"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("merketoaspnet.Models.Entities.AddressEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("merketoaspnet.Models.Entities.ContactFormEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("merketoaspnet.Models.Entities.ProductEntity", b =>
                {
                    b.Property<string>("ArticleNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ingress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Price")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VendorName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ArticleNumber");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ArticleNumber = "1010",
                            Description = "These headphones will make your life 12%b better if you like music",
                            Image = "https://images.pexels.com/photos/1037992/pexels-photo-1037992.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2",
                            Ingress = "Best headphones for rock music",
                            Price = "1000",
                            ProductName = "AmazingSound123",
                            VendorName = "ABC Headphones"
                        },
                        new
                        {
                            ArticleNumber = "1020",
                            Description = "These headphones will make your life 18% better if you like music",
                            Image = "https://images.pexels.com/photos/1037999/pexels-photo-1037999.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2",
                            Ingress = "Best headphones for pop music",
                            Price = "2000",
                            ProductName = "VeryGoodSound123",
                            VendorName = "ABC Headphones"
                        },
                        new
                        {
                            ArticleNumber = "1030",
                            Description = "Very very very very very good headphones",
                            Image = "https://images.pexels.com/photos/3761020/pexels-photo-3761020.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2",
                            Ingress = "Best headphones for alternative music",
                            Price = "5000",
                            ProductName = "VeryAwesomeSound123",
                            VendorName = "ABC Headphones"
                        },
                        new
                        {
                            ArticleNumber = "1040",
                            Description = "Extremely good and awesome and all around kinda great",
                            Image = "https://images.pexels.com/photos/3394660/pexels-photo-3394660.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2",
                            Ingress = "Best headphones in 2021",
                            Price = "3000",
                            ProductName = "GreatSound123",
                            VendorName = "ABC Headphones"
                        },
                        new
                        {
                            ArticleNumber = "1050",
                            Description = "Extremely okay and okay sound and all around kinda okay headphones",
                            Image = "https://images.pexels.com/photos/3394650/pexels-photo-3394650.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2",
                            Ingress = "Best of the average headphones in 2019",
                            Price = "1000",
                            ProductName = "OkaySound123",
                            VendorName = "ABC Headphones"
                        },
                        new
                        {
                            ArticleNumber = "1060",
                            Description = "If you do not like music but want to own a pair of headphones these are great",
                            Image = "https://images.pexels.com/photos/5081386/pexels-photo-5081386.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2",
                            Ingress = "Cheap and not very good",
                            Price = "199",
                            ProductName = "NotVeryGoodSound123",
                            VendorName = "ABC Headphones"
                        },
                        new
                        {
                            ArticleNumber = "1070",
                            Description = "These are wow. Just wow.",
                            Image = "https://images.pexels.com/photos/3771842/pexels-photo-3771842.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2",
                            Ingress = "Top quality",
                            Price = "10000",
                            ProductName = "VeryPro",
                            VendorName = "ABC Headphones"
                        },
                        new
                        {
                            ArticleNumber = "1080",
                            Description = "These are kinda wow. Just kinda wow.",
                            Image = "https://images.pexels.com/photos/3587496/pexels-photo-3587496.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2",
                            Ingress = "Almost Top quality",
                            Price = "6000",
                            ProductName = "KindaPro",
                            VendorName = "ABC Headphones"
                        },
                        new
                        {
                            ArticleNumber = "1090",
                            Description = "These are almost wow. Just almost wow.",
                            Image = "https://images.pexels.com/photos/2918997/pexels-photo-2918997.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2",
                            Ingress = " Almost Top quality",
                            Price = "8000",
                            ProductName = "SemiPro",
                            VendorName = "ABC Headphones"
                        },
                        new
                        {
                            ArticleNumber = "1100",
                            Description = "Buy one of every color. Low price considering the good quality",
                            Image = "https://images.pexels.com/photos/819012/pexels-photo-819012.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2",
                            Ingress = "Good Headphones",
                            Price = "499",
                            ProductName = "EverydayMusic",
                            VendorName = "ABC Headphones"
                        },
                        new
                        {
                            ArticleNumber = "1110",
                            Description = "These work. You can listen to music with them",
                            Image = "https://images.pexels.com/photos/3587475/pexels-photo-3587475.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2",
                            Ingress = " Mastering sound through technology",
                            Price = "20000",
                            ProductName = "Soundmaster",
                            VendorName = "ABC Headphones"
                        },
                        new
                        {
                            ArticleNumber = "1120",
                            Description = "If you like classical music you should buy them.",
                            Image = "https://images.pexels.com/photos/3394663/pexels-photo-3394663.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2",
                            Ingress = "Headphones designed for classical music",
                            Price = "3000",
                            ProductName = "Classics",
                            VendorName = "ABC Headphones"
                        });
                });

            modelBuilder.Entity("merketoaspnet.Models.Entities.ProductTagEntity", b =>
                {
                    b.Property<string>("ArticleNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("ArticleNumber", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ProductTags");

                    b.HasData(
                        new
                        {
                            ArticleNumber = "1010",
                            TagId = 4
                        },
                        new
                        {
                            ArticleNumber = "1020",
                            TagId = 4
                        },
                        new
                        {
                            ArticleNumber = "1030",
                            TagId = 4
                        },
                        new
                        {
                            ArticleNumber = "1040",
                            TagId = 4
                        },
                        new
                        {
                            ArticleNumber = "1050",
                            TagId = 5
                        },
                        new
                        {
                            ArticleNumber = "1060",
                            TagId = 5
                        },
                        new
                        {
                            ArticleNumber = "1070",
                            TagId = 5
                        },
                        new
                        {
                            ArticleNumber = "1080",
                            TagId = 5
                        },
                        new
                        {
                            ArticleNumber = "1090",
                            TagId = 6
                        },
                        new
                        {
                            ArticleNumber = "1100",
                            TagId = 6
                        },
                        new
                        {
                            ArticleNumber = "1110",
                            TagId = 6
                        },
                        new
                        {
                            ArticleNumber = "1120",
                            TagId = 6
                        });
                });

            modelBuilder.Entity("merketoaspnet.Models.Entities.TagEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            TagName = "New Headphones"
                        },
                        new
                        {
                            Id = 5,
                            TagName = "Featured headphones"
                        },
                        new
                        {
                            Id = 6,
                            TagName = "Popular headphones"
                        });
                });

            modelBuilder.Entity("merketoaspnet.Models.Entities.UserAddressEntity", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "AddressId");

                    b.HasIndex("AddressId");

                    b.ToTable("UserAddresses");
                });

            modelBuilder.Entity("merketoaspnet.Models.Entities.UserEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "9ab0d2f8-a950-42fe-af29-456e8bebba1b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e5a6f425-154e-4ee5-9015-03fe9b48e8c1",
                            Email = "administrator@merketo.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMINISTRATOR@MERKETO.COM",
                            NormalizedUserName = "ADMINISTRATOR@MERKETO.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELelCn/vSTqc0cdhRcI89VZacMNCx6QyG1ruZLSsrxtq56Dnd+6M9r2cTKKpW0A+jQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "be7e7924-0e49-4e31-ace8-cc4ca992962c",
                            TwoFactorEnabled = false,
                            UserName = "administrator@merketo.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("merketoaspnet.Models.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("merketoaspnet.Models.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("merketoaspnet.Models.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("merketoaspnet.Models.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("merketoaspnet.Models.Entities.ProductTagEntity", b =>
                {
                    b.HasOne("merketoaspnet.Models.Entities.ProductEntity", "Product")
                        .WithMany("Tags")
                        .HasForeignKey("ArticleNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("merketoaspnet.Models.Entities.TagEntity", "Tag")
                        .WithMany("Products")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("merketoaspnet.Models.Entities.UserAddressEntity", b =>
                {
                    b.HasOne("merketoaspnet.Models.Entities.AddressEntity", "Address")
                        .WithMany("UserAddresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("merketoaspnet.Models.Entities.UserEntity", "User")
                        .WithMany("UserAddresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("User");
                });

            modelBuilder.Entity("merketoaspnet.Models.Entities.AddressEntity", b =>
                {
                    b.Navigation("UserAddresses");
                });

            modelBuilder.Entity("merketoaspnet.Models.Entities.ProductEntity", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("merketoaspnet.Models.Entities.TagEntity", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("merketoaspnet.Models.Entities.UserEntity", b =>
                {
                    b.Navigation("UserAddresses");
                });
#pragma warning restore 612, 618
        }
    }
}
